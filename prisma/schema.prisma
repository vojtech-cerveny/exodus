datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String                @id @default(cuid())
  name                String?
  email               String?               @unique
  emailVerified       DateTime?
  image               String?
  accounts            Account[]
  sessions            Session[]
  Brotherhood         Brotherhood[]         @relation("BrotherhoodMembers")
  brotherhoodId       String?
  BrotherhoodProgress BrotherhoodProgress[]
  createdBrotherhoods Brotherhood[]
  Bookmark            Bookmark[]
  versions            Versions[]
}

// not used yet, but we will need to store versions in the future - but just ID of the version.
model Versions {
  id      String @id @default(cuid())
  version String // 2024
  type    String // exodus
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// APPLICATION
model Brotherhood {
  id                    String                  @id @default(cuid())
  name                  String
  description           String?
  image                 String?
  visibility            Boolean                 @default(false)
  members               User[]                  @relation("BrotherhoodMembers")
  BrotherhoodInvitation BrotherhoodInvitation[]
  createdBy             String?
  creator               User?                   @relation(fields: [createdBy], references: [id])
}

model BrotherhoodInvitation {
  id            String  @id @default(cuid())
  brotherhoodId String
  active        Boolean @default(true)
  deleted       Boolean @default(false)
  token         String  @unique @default(cuid())

  brotherhood Brotherhood @relation(fields: [brotherhoodId], references: [id], onDelete: Cascade)

  @@unique([id])
  @@unique([brotherhoodId])
}

enum Mood {
  GOOD
  NEUTRAL
  SAD
}

enum State {
  NO_INFORMATION
  DONE
  NOT_DONE
}

model BrotherhoodProgress {
  id     String @id @default(cuid())
  userId String

  exercise    State    @default(NO_INFORMATION)
  shower      State    @default(NO_INFORMATION)
  asceticism  State    @default(NO_INFORMATION)
  overallMood Mood
  prayer      Mood
  date        DateTime
  note        String?

  lastUpdateDate DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([date, userId], name: "date_userId")
}

model Bookmark {
  id                    String    @id @default(cuid())
  userId                String
  url                   String
  passage               String
  type                  String
  createdAt             DateTime  @default(now())
  updatedAt             DateTime?
  active                Boolean   @default(true)
  note                  String?
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  sharedWithBrotherhood Boolean   @default(false)
}
